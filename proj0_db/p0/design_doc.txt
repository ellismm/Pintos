
                        +--------------------+
                        |        CS 439      |
                        |  PROJECT 0: SHELL  |
                        |   DESIGN DOCUMENT  |
                        +--------------------+


The questions in this design document should reflect the design of the code you
wrote for the project.  Your grade will reflect both the quality of your answer
in this document and the quality of the design implementation in your code.  You
may receive partial credit for answering questions for parts of the project that
you did not get to implement, but you must indicate in your answer that there is
no corresponding implementation, or you will not receive any credit.


For each question, you should include both the name of the file(s), function
name(s), and the line numbers where the relevant code may be found.


These design documents should be completed individually.  Group members are
welcome to use this document as a guide for design and are welcome to discuss
the questions, but there should be no group notes or other sorts of copying of
design documents.


When you have completed your design document, submit it to the Canvas assignment
Project 1 Design and Documentation.  ***Your submission must be a text file and
each line must not extend past 80 characters.  (Note that rtf files are NOT text
files.)


################
YOUR INFO
################
Name1:Mark Ellis
EID1:MME839
CS login:mark
Email:mark.m.ellis@utexas.edu
Unique Number:51525


Slip days used:0


****EACH student submits a (unique) design document.****


################
YOUR PARTNER'S INFO
################
Name1: JARED RANKIN
EID1: jlr5723
CS login: jrankin
Email: jrankin@cs.utexas.edu
Unique Number: 51525


Your partner's ranking (scale below):
Excellent

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.



Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.


Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.


Marginal: Sometimes failed to show up and/or rarely prepared.


Deficient: Often failed to show up and/or rarely prepared.


Unsatisfactory: Consistently failed to show up and/or unprepared.


Superficial: Practically no participation.


No Show: No participation at all.


################
Preliminaries
################
(1) If you have any preliminary comments on your submission or notes for
  the TA, please give them here.


(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.




################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.
  14 child processes are created.
  process 0: 5
  process 1: 2
  process 2: 1
  process 3: 1
  process 4: 0
  process 5: 1
  process 6: 3
  process 7: 1
  process 8: 0
  process 9: 1
  process 10: 2
  process 11: 1
  process 12: 1
  process 13: 0
  process 14: 1
 
	Main Process A
   		Child AB
		  n-1=4
			Child ABC
			  n-1 =  3
				Child ABCD
				  n-1 = 2
					Child ABCDE
					  n-1 = 1
					Child 4 ABCDF
					  n-2 = 0
				Child ABCA
				  n-2 = 1
			Child ABD
			  n -2 = 2
				Child ABDA
				  n-1 = 1
				Child ABDB
				  n-2 = 0		
		Child AC
		  n-2 = 3
			Child ACA
			  n-1 = 2
				Child ACAB 
				  n-1 =1
				Child ACAC
				  n-2 = 0

			Child ACB
			  n-2 = 1




(2) In part 0.3, which flavor of exec did you choose to use?  Why?

Execve. Since our environment is given to us, GNU, we used execve instead of execv. We have only have one string that we are looking for , 'quit'. We pass the string given from the psh shell command line to the execve first argument. If that argument is 'quit' then we pass this to the to the string to the GNU environment and it terminates the psh shell. If the string is not 'quit' then the execve gets called and we print an error message. The 2nd argument is and arry of pointers that will be passed to the new program called. We used execve so that we can use the built in command 'quit' from the environment that we are calling.





################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

	sigaction() makes sure that our handlers are run when given the proper signal from the OS. signal() is unpredictable with different unix versions.



(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)

	retq


(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed in the application 
  code?

	mov  %eax, -0x48(%rbp)



################
Questions regarding Part 2
################
(1) Describe your implementation of waitfg().  How did you avoid race
  conditions with the SIGCHLD handler?  How did you avoid busy waiting?

 	The waitfg() takes in a PID and looks through all the jobs making sure that job is in the jobs list by calling fgpid(). If that job is there then we will use suspend to run the process in the forground until we receive a signal, SIGINT, SIGCHLD, OR SIGSTP. The race conditons with the SIGCHLD handler was avoided by blocking SIGINT signal using sigprocmask() until finished looking through the jobs to check if the given pid was in the jobs list. Once all the jobs have been compared to the given pid then we used sigprocmask() again to unblock SIGINT signal. Using sigsuspend() avoids busy waiting. When using sigsuspend() the process is in the blocked state waiting on a signal to invoke a signal handler and therefore giving up use of unnecessary CPU usage. 

(2) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

	Using three separate signal handlers would give a quicker response time if the handler checking for each signal has a totally different design. But if the handler checkings were all similar than the response time for the single signale handler will be quicker. So the advantage depends on the signal handler and how they are designed to catch the signal.
